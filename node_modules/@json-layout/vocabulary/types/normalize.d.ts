/**
 * @param {string | number} key
 * @param {SchemaFragment} schemaFragment
 * @param {string} schemaPath
 * @param {Record<string, import('./types.js').ComponentInfo>} components
 * @param {(text: string) => string} markdown
 * @param {string[]} [optionsKeys]
 * @param {'oneOf' | 'patternProperties'} [schemaChild]
 * @param {string | undefined} [knownType]
 * @param {boolean} [knownNullable]
 * @returns {{layout: NormalizedLayout, errors: string[]}}
 */
export function normalizeLayoutFragment(key: string | number, schemaFragment: SchemaFragment, schemaPath: string, components: Record<string, import('./types.js').ComponentInfo>, markdown?: (text: string) => string, optionsKeys?: string[] | undefined, schemaChild?: "oneOf" | "patternProperties" | undefined, knownType?: string | undefined, knownNullable?: boolean | undefined): {
    layout: NormalizedLayout;
    errors: string[];
};
export function getSchemaFragmentType(schemaFragment: SchemaFragment): {
    type: string | undefined;
    nullable: boolean;
};
export type Child = import('./index.js').Child;
export type Children = import('./index.js').Children;
export type BaseCompObject = import('./index.js').BaseCompObject;
export type Expression = import('./index.js').Expression;
export type NormalizedLayout = import('./index.js').NormalizedLayout;
export type LayoutKeyword = import('./index.js').LayoutKeyword;
export type PartialChildren = import('./index.js').PartialChildren;
export type PartialCompObject = import('./index.js').PartialCompObject;
export type SchemaFragment = import("./types.js").SchemaFragment;
//# sourceMappingURL=normalize.d.ts.map