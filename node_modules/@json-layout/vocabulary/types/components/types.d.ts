import type { BaseCompObject, Expression, Children, GetItems, SelectItems } from '../normalized-layout/types.js';
export type None = {
    comp?: "none";
    [k: string]: unknown;
} & BaseCompObject & (BaseCompObject & {
    comp: string;
    label?: string;
    [k: string]: unknown;
});
export type Section = {
    comp?: "section";
    [k: string]: unknown;
} & BaseCompObject & (BaseCompObject & {
    comp: string;
    title?: string | null;
    subtitle?: string | null;
    children: Children;
    [k: string]: unknown;
});
export type Tabs = {
    comp?: "tabs";
    [k: string]: unknown;
} & BaseCompObject & (BaseCompObject & {
    comp: string;
    title?: string | null;
    subtitle?: string | null;
    children: Children;
    [k: string]: unknown;
});
export type VerticalTabs = {
    comp?: "vertical-tabs";
    [k: string]: unknown;
} & BaseCompObject & (BaseCompObject & {
    comp: string;
    title?: string | null;
    subtitle?: string | null;
    children: Children;
    [k: string]: unknown;
});
export type ExpansionPanels = {
    comp?: "expansion-panels";
    [k: string]: unknown;
} & BaseCompObject & (BaseCompObject & {
    comp: string;
    title?: string | null;
    subtitle?: string | null;
    children: Children;
    [k: string]: unknown;
});
export type Stepper = {
    comp?: "stepper";
    [k: string]: unknown;
} & BaseCompObject & (BaseCompObject & {
    comp: string;
    title?: string | null;
    subtitle?: string | null;
    children: Children;
    [k: string]: unknown;
});
export type Card = {
    comp?: "card";
    [k: string]: unknown;
} & BaseCompObject & (BaseCompObject & {
    comp: string;
    title?: string | null;
    subtitle?: string | null;
    children: Children;
    [k: string]: unknown;
});
export type List = {
    comp?: "list";
    [k: string]: unknown;
} & BaseCompObject & (BaseCompObject & {
    comp: string;
    label?: string;
    [k: string]: unknown;
}) & {
    title?: string;
    listEditMode: "inline" | "inline-single" | "menu" | "dialog";
    listActions: ("add" | "edit" | "delete" | "sort" | "duplicate")[];
    itemTitle?: Expression;
    itemSubtitle?: Expression;
    indexed?: string[];
    messages?: {
        addItem?: string;
        delete?: string;
        edit?: string;
        duplicate?: string;
        sort?: string;
    };
    [k: string]: unknown;
};
export type TextField = {
    comp?: "text-field";
    [k: string]: unknown;
} & BaseCompObject & (BaseCompObject & {
    comp: string;
    label?: string;
    [k: string]: unknown;
}) & (BaseCompObject & {
    comp: string;
    label?: string;
    autofocus?: boolean;
    [k: string]: unknown;
}) & {
    placeholder?: string;
    [k: string]: unknown;
};
export type Textarea = {
    comp?: "textarea";
    [k: string]: unknown;
} & BaseCompObject & (BaseCompObject & {
    comp: string;
    label?: string;
    [k: string]: unknown;
}) & (BaseCompObject & {
    comp: string;
    label?: string;
    autofocus?: boolean;
    [k: string]: unknown;
}) & {
    placeholder?: string;
    [k: string]: unknown;
};
export type NumberField = {
    comp?: "number-field";
    [k: string]: unknown;
} & BaseCompObject & (BaseCompObject & {
    comp: string;
    label?: string;
    [k: string]: unknown;
}) & (BaseCompObject & {
    comp: string;
    label?: string;
    autofocus?: boolean;
    [k: string]: unknown;
}) & {
    step?: number;
    min?: number;
    max?: number;
    placeholder?: string;
    [k: string]: unknown;
};
export type Checkbox = {
    comp?: "checkbox";
    [k: string]: unknown;
} & BaseCompObject & (BaseCompObject & {
    comp: string;
    label?: string;
    [k: string]: unknown;
});
export type Switch = {
    comp?: "switch";
    [k: string]: unknown;
} & BaseCompObject & (BaseCompObject & {
    comp: string;
    label?: string;
    [k: string]: unknown;
});
export type Slider = {
    comp?: "slider";
    [k: string]: unknown;
} & BaseCompObject & (BaseCompObject & {
    comp: string;
    label?: string;
    [k: string]: unknown;
}) & {
    step?: number;
    min?: number;
    max?: number;
    [k: string]: unknown;
};
export type DatePicker = {
    comp?: "date-picker";
    [k: string]: unknown;
} & BaseCompObject & (BaseCompObject & {
    comp: string;
    label?: string;
    [k: string]: unknown;
}) & {
    min?: string;
    max?: string;
    format?: "date" | "date-time";
    [k: string]: unknown;
};
export type DateTimePicker = {
    comp?: "date-time-picker";
    [k: string]: unknown;
} & BaseCompObject & (BaseCompObject & {
    comp: string;
    label?: string;
    [k: string]: unknown;
}) & {
    min?: string;
    max?: string;
    [k: string]: unknown;
};
export type TimePicker = {
    comp?: "time-picker";
    [k: string]: unknown;
} & BaseCompObject & (BaseCompObject & {
    comp: string;
    label?: string;
    [k: string]: unknown;
}) & {
    min?: string;
    max?: string;
    [k: string]: unknown;
};
export type ColorPicker = {
    comp?: "color-picker";
    [k: string]: unknown;
} & BaseCompObject & (BaseCompObject & {
    comp: string;
    label?: string;
    [k: string]: unknown;
});
export type Select = {
    comp?: "select";
    [k: string]: unknown;
} & BaseCompObject & (BaseCompObject & {
    comp: string;
    label?: string;
    [k: string]: unknown;
}) & (BaseCompObject & {
    comp: string;
    label?: string;
    autofocus?: boolean;
    [k: string]: unknown;
}) & (BaseCompObject & {
    comp: string;
    items?: SelectItems;
    getItems?: GetItems;
    multiple?: boolean;
    separator?: string;
    [k: string]: unknown;
}) & (BaseCompObject & {
    comp: string;
    multiple?: boolean;
    [k: string]: unknown;
});
export type Autocomplete = {
    comp?: "autocomplete";
    [k: string]: unknown;
} & BaseCompObject & (BaseCompObject & {
    comp: string;
    label?: string;
    [k: string]: unknown;
}) & (BaseCompObject & {
    comp: string;
    label?: string;
    autofocus?: boolean;
    [k: string]: unknown;
}) & (BaseCompObject & {
    comp: string;
    items?: SelectItems;
    getItems?: GetItems;
    multiple?: boolean;
    separator?: string;
    [k: string]: unknown;
}) & (BaseCompObject & {
    comp: string;
    multiple?: boolean;
    [k: string]: unknown;
});
export type Combobox = {
    comp?: "combobox";
    [k: string]: unknown;
} & BaseCompObject & (BaseCompObject & {
    comp: string;
    label?: string;
    [k: string]: unknown;
}) & (BaseCompObject & {
    comp: string;
    label?: string;
    autofocus?: boolean;
    [k: string]: unknown;
}) & (BaseCompObject & {
    comp: string;
    items?: SelectItems;
    getItems?: GetItems;
    multiple?: boolean;
    separator?: string;
    [k: string]: unknown;
}) & (BaseCompObject & {
    comp: string;
    multiple?: boolean;
    [k: string]: unknown;
});
export type NumberCombobox = {
    comp?: "number-combobox";
    [k: string]: unknown;
} & BaseCompObject & (BaseCompObject & {
    comp: string;
    label?: string;
    [k: string]: unknown;
}) & (BaseCompObject & {
    comp: string;
    label?: string;
    autofocus?: boolean;
    [k: string]: unknown;
}) & (BaseCompObject & {
    comp: string;
    items?: SelectItems;
    getItems?: GetItems;
    multiple?: boolean;
    separator?: string;
    [k: string]: unknown;
}) & (BaseCompObject & {
    comp: string;
    multiple?: boolean;
    [k: string]: unknown;
}) & {
    step?: number;
    min?: number;
    max?: number;
    [k: string]: unknown;
};
export type CheckboxGroup = {
    comp?: "checkbox-group";
    [k: string]: unknown;
} & BaseCompObject & (BaseCompObject & {
    comp: string;
    label?: string;
    [k: string]: unknown;
}) & (BaseCompObject & {
    comp: string;
    items?: SelectItems;
    getItems?: GetItems;
    multiple?: boolean;
    separator?: string;
    [k: string]: unknown;
}) & (BaseCompObject & {
    comp: string;
    multiple?: boolean;
    [k: string]: unknown;
});
export type SwitchGroup = {
    comp?: "switch-group";
    [k: string]: unknown;
} & BaseCompObject & (BaseCompObject & {
    comp: string;
    label?: string;
    [k: string]: unknown;
}) & (BaseCompObject & {
    comp: string;
    items?: SelectItems;
    getItems?: GetItems;
    multiple?: boolean;
    separator?: string;
    [k: string]: unknown;
}) & (BaseCompObject & {
    comp: string;
    multiple?: boolean;
    [k: string]: unknown;
});
export type RadioGroup = {
    comp?: "radio-group";
    [k: string]: unknown;
} & BaseCompObject & (BaseCompObject & {
    comp: string;
    label?: string;
    [k: string]: unknown;
}) & (BaseCompObject & {
    comp: string;
    items?: SelectItems;
    getItems?: GetItems;
    multiple?: boolean;
    separator?: string;
    [k: string]: unknown;
});
export type FileInput = {
    comp?: "file-input";
    [k: string]: unknown;
} & BaseCompObject & (BaseCompObject & {
    comp: string;
    label?: string;
    [k: string]: unknown;
}) & (BaseCompObject & {
    comp: string;
    label?: string;
    autofocus?: boolean;
    [k: string]: unknown;
}) & (BaseCompObject & {
    comp: string;
    multiple?: boolean;
    [k: string]: unknown;
}) & {
    accept?: string;
    placeholder?: string;
    [k: string]: unknown;
};
export type OneOfSelect = {
    comp?: "one-of-select";
    [k: string]: unknown;
} & BaseCompObject & (BaseCompObject & {
    comp: string;
    label?: string;
    [k: string]: unknown;
}) & {
    emptyData?: boolean;
    [k: string]: unknown;
};
//# sourceMappingURL=types.d.ts.map