declare namespace _default {
    let $id: string;
    let $defs: {
        "normalized-layout": {
            title: string;
            type: string;
            unevaluatedProperties: boolean;
            oneOf: {
                $ref: string;
            }[];
        };
        "switch-struct": {
            type: string;
            required: string[];
            additionalProperties: boolean;
            properties: {
                switch: {
                    type: string;
                    items: {
                        $ref: string;
                    };
                };
            };
        };
        "base-comp-object": {
            type: string;
            required: string[];
            properties: {
                comp: {
                    type: string;
                };
                if: {
                    $ref: string;
                };
                options: {
                    $ref: string;
                };
                getOptions: {
                    $ref: string;
                };
                defaultData: {};
                getDefaultData: {
                    $ref: string;
                };
                constData: {};
                getConstData: {
                    $ref: string;
                };
                transformData: {
                    $ref: string;
                };
                nullable: {
                    type: string;
                };
                help: {
                    type: string;
                };
                cols: {
                    $ref: string;
                };
                props: {
                    $ref: string;
                };
                getProps: {
                    $ref: string;
                };
                slots: {
                    type: string;
                    allOf: ({
                        $ref: string;
                        properties?: undefined;
                    } | {
                        properties: {
                            before: {
                                $ref: string;
                            };
                            after: {
                                $ref: string;
                            };
                            component: {
                                $ref: string;
                            };
                        };
                        $ref?: undefined;
                    })[];
                };
            };
        };
        "composite-comp-object": {
            allOf: ({
                $ref: string;
                type?: undefined;
                required?: undefined;
                properties?: undefined;
            } | {
                type: string;
                required: string[];
                properties: {
                    comp: {
                        type: string;
                    };
                    title: {
                        type: string[];
                    };
                    subtitle: {
                        type: string[];
                    };
                    children: {
                        $ref: string;
                    };
                };
                $ref?: undefined;
            })[];
        };
        "simple-comp-object": {
            allOf: ({
                $ref: string;
                type?: undefined;
                required?: undefined;
                properties?: undefined;
            } | {
                type: string;
                required: string[];
                properties: {
                    comp: {
                        type: string;
                    };
                    label: {
                        type: string;
                    };
                };
                $ref?: undefined;
            })[];
        };
        "focusable-comp-object": {
            allOf: ({
                $ref: string;
                type?: undefined;
                required?: undefined;
                properties?: undefined;
            } | {
                type: string;
                required: string[];
                properties: {
                    comp: {
                        type: string;
                    };
                    label: {
                        type: string;
                    };
                    autofocus: {
                        type: string;
                    };
                };
                $ref?: undefined;
            })[];
        };
        "items-based-comp-object": {
            allOf: ({
                $ref: string;
                type?: undefined;
                required?: undefined;
                properties?: undefined;
            } | {
                type: string;
                required: string[];
                properties: {
                    comp: {
                        type: string;
                    };
                    items: {
                        $ref: string;
                    };
                    getItems: {
                        $ref: string;
                    };
                    multiple: {
                        type: string;
                    };
                    separator: {
                        type: string;
                    };
                };
                $ref?: undefined;
            })[];
        };
        "multiple-compat-comp-object": {
            allOf: ({
                $ref: string;
                type?: undefined;
                required?: undefined;
                properties?: undefined;
            } | {
                type: string;
                required: string[];
                properties: {
                    comp: {
                        type: string;
                    };
                    multiple: {
                        type: string;
                    };
                };
                $ref?: undefined;
            })[];
        };
        "child-ref": {
            type: string;
            required: string[];
            additionalProperties: boolean;
            properties: {
                key: {
                    type: string[];
                };
                cols: {
                    $ref: string;
                };
            };
        };
        "child-composite": {
            type: string;
            required: string[];
            properties: {
                key: {
                    type: string[];
                };
                cols: {
                    $ref: string;
                };
                comp: {
                    type: string;
                };
                title: {
                    type: string[];
                };
                subtitle: {
                    type: string[];
                };
                children: {
                    $ref: string;
                };
            };
        };
        child: {
            title: string;
            type: string;
            oneOf: {
                $ref: string;
            }[];
        };
        children: {
            type: string;
            items: {
                $ref: string;
            };
        };
        "select-items": {
            type: string;
            items: {
                $ref: string;
            };
        };
        "select-item": {
            type: string;
            required: string[];
            properties: {
                title: {
                    type: string;
                };
                key: {
                    type: string;
                };
                value: {};
                icon: {
                    type: string;
                };
            };
        };
        "get-items": {
            type: string;
            allOf: ({
                properties: {
                    returnObjects: {
                        type: string;
                        readOnly: boolean;
                    };
                    itemsResults: {
                        $ref: string;
                    };
                    itemTitle: {
                        $ref: string;
                    };
                    itemKey: {
                        $ref: string;
                    };
                    itemValue: {
                        $ref: string;
                    };
                    itemIcon: {
                        $ref: string;
                    };
                    immutable: {
                        type: string;
                    };
                };
                oneOf?: undefined;
            } | {
                oneOf: {
                    $ref: string;
                }[];
                properties?: undefined;
            })[];
        };
        "get-items-fetch": {
            type: string;
            required: string[];
            properties: {
                url: {
                    $ref: string;
                };
                qSearchParam: {
                    type: string;
                };
                searchParams: {
                    type: string;
                    patternProperties: {
                        ".*": {
                            $ref: string;
                        };
                    };
                };
            };
        };
        expression: {
            type: string;
            required: string[];
            properties: {
                type: {
                    type: string;
                    enum: string[];
                };
                expr: {
                    type: string;
                };
                pure: {
                    type: string;
                };
                dataAlias: {
                    type: string;
                };
                ref: {
                    type: string;
                    readOnly: boolean;
                };
            };
        };
        "cols-obj": {
            type: string;
            additionalProperties: boolean;
            required: string[];
            properties: {
                xs: {
                    $ref: string;
                    default: number;
                };
                sm: {
                    $ref: string;
                };
                md: {
                    $ref: string;
                };
                lg: {
                    $ref: string;
                };
                xl: {
                    $ref: string;
                };
                xxl: {
                    $ref: string;
                };
            };
        };
        cols: {
            type: string;
            minimum: number;
            maximum: number;
        };
        slot: {
            oneOf: ({
                type: string;
                additionalProperties: boolean;
                required: string[];
                properties: {
                    text: {
                        type: string;
                    };
                    markdown?: undefined;
                    name?: undefined;
                };
            } | {
                type: string;
                additionalProperties: boolean;
                required: string[];
                properties: {
                    markdown: {
                        type: string;
                    };
                    text?: undefined;
                    name?: undefined;
                };
            } | {
                type: string;
                additionalProperties: boolean;
                required: string[];
                properties: {
                    name: {
                        type: string;
                    };
                    text?: undefined;
                    markdown?: undefined;
                };
            })[];
        };
        "state-node-options-base": {
            type: string;
            allOf: ({
                $ref: string;
                properties?: undefined;
            } | {
                properties: {
                    readOnly: {
                        type: string;
                        default: boolean;
                    };
                    summary: {
                        type: string;
                        default: boolean;
                    };
                    titleDepth: {
                        type: string;
                        minimum: number;
                        maximum: number;
                        default: number;
                    };
                    density: {
                        type: string;
                        enum: string[];
                        default: string;
                    };
                    indent: {
                        type: string[];
                    };
                    removeAdditional: {
                        description: string;
                        default: string;
                        oneOf: ({
                            type: string;
                            enum?: undefined;
                        } | {
                            type: string;
                            enum: string[];
                        })[];
                    };
                    validateOn: {
                        type: string;
                        enum: string[];
                        default: string;
                    };
                    updateOn: {
                        type: string;
                        enum: string[];
                        default: string;
                    };
                    debounceInputMs: {
                        type: string;
                        minimum: number;
                        default: number;
                    };
                    initialValidation: {
                        type: string;
                        enum: string[];
                        default: string;
                    };
                    defaultOn: {
                        type: string;
                        enum: string[];
                        default: string;
                    };
                    autofocus: {
                        type: string;
                        default: boolean;
                    };
                    readOnlyPropertiesMode: {
                        type: string;
                        enum: string[];
                        default: string;
                    };
                };
                $ref?: undefined;
            })[];
        };
        "state-node-options-base-lib": {
            type: string;
            patternProperties: {
                ".*": {};
            };
        };
        "state-node-props-lib": {
            type: string;
            patternProperties: {
                ".*": {};
            };
        };
        "state-node-slots-lib": {
            type: string;
            patternProperties: {
                ".*": {
                    $ref: string;
                };
            };
        };
    };
}
export default _default;
//# sourceMappingURL=schema.d.ts.map