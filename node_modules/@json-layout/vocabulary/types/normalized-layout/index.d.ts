export function isSwitchStruct(layout: NormalizedLayout): layout is import("./types.js").SwitchStruct;
export function isCompObject(layout: NormalizedLayout): layout is import("./types.js").BaseCompObject;
export function childIsCompObject(child: Child): child is import("./types.js").Child & import("./types.js").BaseCompObject & {
    [k: string]: unknown;
    comp: string;
    title?: string | null | undefined;
    subtitle?: string | null | undefined;
    children: import("./types.js").Children;
};
export function isCompositeLayout(layout: BaseCompObject, components: Record<string, import('../types.js').ComponentInfo>): layout is import("./types.js").CompositeCompObject;
export function isListLayout(layout: BaseCompObject): layout is import("../components/types.js").List;
export function isFocusableLayout(layout: BaseCompObject, components: Record<string, import('../types.js').ComponentInfo>): layout is import("./types.js").FocusableCompObject;
export function isItemsLayout(layout: BaseCompObject, components: Record<string, import('../types.js').ComponentInfo>): layout is import("./types.js").ItemsBasedCompObject;
export function isGetItemsExpression(getItems: GetItems): getItems is import("./types.js").Expression;
export function isGetItemsFetch(getItems: GetItems): getItems is import("./types.js").GetItemsFetch;
export function isTextSlot(slot: Slot): slot is {
    text: string;
};
export function isMarkdownSlot(slot: Slot): slot is {
    markdown: string;
};
export function isNameSlot(slot: Slot): slot is {
    name: string;
};
/**
 * @typedef {import('./types.js').NormalizedLayout} NormalizedLayout
 * @typedef {import('./types.js').SwitchStruct} SwitchStruct
 * @typedef {import('./types.js').BaseCompObject} BaseCompObject
 * @typedef {import('./types.js').SelectItem} SelectItem
 * @typedef {import('./types.js').SelectItems} SelectItems
 * @typedef {import('./types.js').GetItemsFetch} GetItemsFetch
 * @typedef {import('./types.js').Child} Child
 * @typedef {import('./types.js').Children} Children
 * @typedef {import('./types.js').CompositeCompObject} CompositeCompObject
 * @typedef {import('./types.js').ItemsBasedCompObject} ItemsBasedCompObject
 * @typedef {import('./types.js').FocusableCompObject} FocusableCompObject
 * @typedef {import('./types.js').GetItems} GetItems
 * @typedef {import('./types.js').Expression} Expression
 * @typedef {import('./types.js').Cols} Cols
 * @typedef {import('./types.js').ColsObj} ColsObj
 * @typedef {import('./types.js').StateNodeOptionsBase} StateNodeOptionsBase
 * @typedef {import('./types.js').StateNodePropsLib} StateNodePropsLib
 * @typedef {import('./types.js').Slot} Slot
 * @typedef {{ errors: any, (layoutKeyword: any): layoutKeyword is NormalizedLayout }} ValidateNormalizedLayout
 */
export const validateNormalizedLayout: ValidateNormalizedLayout;
export const normalizedLayoutSchema: any;
export type NormalizedLayout = import('./types.js').NormalizedLayout;
export type SwitchStruct = import('./types.js').SwitchStruct;
export type BaseCompObject = import('./types.js').BaseCompObject;
export type SelectItem = import('./types.js').SelectItem;
export type SelectItems = import('./types.js').SelectItems;
export type GetItemsFetch = import('./types.js').GetItemsFetch;
export type Child = import('./types.js').Child;
export type Children = import('./types.js').Children;
export type CompositeCompObject = import('./types.js').CompositeCompObject;
export type ItemsBasedCompObject = import('./types.js').ItemsBasedCompObject;
export type FocusableCompObject = import('./types.js').FocusableCompObject;
export type GetItems = import('./types.js').GetItems;
export type Expression = import('./types.js').Expression;
export type Cols = import('./types.js').Cols;
export type ColsObj = import('./types.js').ColsObj;
export type StateNodeOptionsBase = import('./types.js').StateNodeOptionsBase;
export type StateNodePropsLib = import('./types.js').StateNodePropsLib;
export type Slot = import('./types.js').Slot;
export type ValidateNormalizedLayout = {
    (layoutKeyword: any): layoutKeyword is import("./types.js").NormalizedLayout;
    errors: any;
};
//# sourceMappingURL=index.d.ts.map