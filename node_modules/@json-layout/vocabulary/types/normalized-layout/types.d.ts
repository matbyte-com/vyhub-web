/**
 * This interface was referenced by `HttpsJsonLayoutGithubIoNormalizedLayoutKeyword`'s JSON-Schema
 * via the `definition` "normalized-layout".
 */
export type NormalizedLayout = SwitchStruct | BaseCompObject;
/**
 * This interface was referenced by `HttpsJsonLayoutGithubIoNormalizedLayoutKeyword`'s JSON-Schema
 * via the `definition` "state-node-options-base".
 */
export type StateNodeOptionsBase = StateNodeOptionsBaseLib & {
    readOnly?: boolean;
    summary?: boolean;
    titleDepth?: number;
    density?: "default" | "comfortable" | "compact";
    indent?: boolean | number;
    /**
     * true is the same as 'unknown', false is the same as 'none'
     */
    removeAdditional?: boolean | ("unknown" | "error" | "none");
    validateOn?: "input" | "blur" | "submit";
    updateOn?: "input" | "blur";
    debounceInputMs?: number;
    initialValidation?: "never" | "always" | "withData";
    defaultOn?: "missing" | "empty" | "never";
    autofocus?: boolean;
    readOnlyPropertiesMode?: "remove" | "hide" | "show";
    [k: string]: unknown;
};
/**
 * This interface was referenced by `HttpsJsonLayoutGithubIoNormalizedLayoutKeyword`'s JSON-Schema
 * via the `definition` "cols".
 */
export type Cols = number;
/**
 * This interface was referenced by `StateNodeSlotsLib`'s JSON-Schema definition
 * via the `patternProperty` ".*".
 *
 * This interface was referenced by `HttpsJsonLayoutGithubIoNormalizedLayoutKeyword`'s JSON-Schema
 * via the `definition` "slot".
 */
export type Slot = {
    text: string;
} | {
    markdown: string;
} | {
    name: string;
};
/**
 * This interface was referenced by `HttpsJsonLayoutGithubIoNormalizedLayoutKeyword`'s JSON-Schema
 * via the `definition` "composite-comp-object".
 */
export type CompositeCompObject = BaseCompObject & {
    comp: string;
    title?: string | null;
    subtitle?: string | null;
    children: Children;
    [k: string]: unknown;
};
/**
 * This interface was referenced by `HttpsJsonLayoutGithubIoNormalizedLayoutKeyword`'s JSON-Schema
 * via the `definition` "child".
 */
export type Child = ChildRef | ChildComposite;
/**
 * This interface was referenced by `HttpsJsonLayoutGithubIoNormalizedLayoutKeyword`'s JSON-Schema
 * via the `definition` "children".
 */
export type Children = Child[];
/**
 * This interface was referenced by `HttpsJsonLayoutGithubIoNormalizedLayoutKeyword`'s JSON-Schema
 * via the `definition` "simple-comp-object".
 */
export type SimpleCompObject = BaseCompObject & {
    comp: string;
    label?: string;
    [k: string]: unknown;
};
/**
 * This interface was referenced by `HttpsJsonLayoutGithubIoNormalizedLayoutKeyword`'s JSON-Schema
 * via the `definition` "focusable-comp-object".
 */
export type FocusableCompObject = BaseCompObject & {
    comp: string;
    label?: string;
    autofocus?: boolean;
    [k: string]: unknown;
};
/**
 * This interface was referenced by `HttpsJsonLayoutGithubIoNormalizedLayoutKeyword`'s JSON-Schema
 * via the `definition` "items-based-comp-object".
 */
export type ItemsBasedCompObject = BaseCompObject & {
    comp: string;
    items?: SelectItems;
    getItems?: GetItems;
    multiple?: boolean;
    separator?: string;
    [k: string]: unknown;
};
/**
 * This interface was referenced by `HttpsJsonLayoutGithubIoNormalizedLayoutKeyword`'s JSON-Schema
 * via the `definition` "select-items".
 */
export type SelectItems = SelectItem[];
/**
 * This interface was referenced by `HttpsJsonLayoutGithubIoNormalizedLayoutKeyword`'s JSON-Schema
 * via the `definition` "get-items".
 */
export type GetItems = {
    returnObjects?: boolean;
    itemsResults?: Expression;
    itemTitle?: Expression;
    itemKey?: Expression;
    itemValue?: Expression;
    itemIcon?: Expression;
    immutable?: boolean;
    [k: string]: unknown;
} & (Expression | GetItemsFetch);
/**
 * This interface was referenced by `HttpsJsonLayoutGithubIoNormalizedLayoutKeyword`'s JSON-Schema
 * via the `definition` "multiple-compat-comp-object".
 */
export type MultipleCompatCompObject = BaseCompObject & {
    comp: string;
    multiple?: boolean;
    [k: string]: unknown;
};
export interface HttpsJsonLayoutGithubIoNormalizedLayoutKeyword {
    [k: string]: unknown;
}
/**
 * This interface was referenced by `HttpsJsonLayoutGithubIoNormalizedLayoutKeyword`'s JSON-Schema
 * via the `definition` "switch-struct".
 */
export interface SwitchStruct {
    switch: BaseCompObject[];
}
/**
 * This interface was referenced by `HttpsJsonLayoutGithubIoNormalizedLayoutKeyword`'s JSON-Schema
 * via the `definition` "base-comp-object".
 */
export interface BaseCompObject {
    comp: string;
    if?: Expression;
    options?: StateNodeOptionsBase;
    getOptions?: Expression;
    defaultData?: unknown;
    getDefaultData?: Expression;
    constData?: unknown;
    getConstData?: Expression;
    transformData?: Expression;
    nullable?: boolean;
    help?: string;
    cols?: ColsObj;
    props?: StateNodePropsLib;
    getProps?: Expression;
    slots?: StateNodeSlotsLib & {
        before?: Slot;
        after?: Slot;
        component?: Slot;
        [k: string]: unknown;
    };
    [k: string]: unknown;
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` ".*".
 *
 * This interface was referenced by `HttpsJsonLayoutGithubIoNormalizedLayoutKeyword`'s JSON-Schema
 * via the `definition` "expression".
 */
export interface Expression {
    type: "js-fn" | "js-eval" | "js-tpl";
    expr: string;
    pure: boolean;
    dataAlias: string;
    ref?: number;
    [k: string]: unknown;
}
/**
 * This interface was referenced by `HttpsJsonLayoutGithubIoNormalizedLayoutKeyword`'s JSON-Schema
 * via the `definition` "state-node-options-base-lib".
 */
export interface StateNodeOptionsBaseLib {
    /**
     * This interface was referenced by `StateNodeOptionsBaseLib`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     */
    [k: string]: unknown;
}
/**
 * This interface was referenced by `HttpsJsonLayoutGithubIoNormalizedLayoutKeyword`'s JSON-Schema
 * via the `definition` "cols-obj".
 */
export interface ColsObj {
    xs: number;
    sm?: Cols;
    md?: Cols;
    lg?: Cols;
    xl?: Cols;
    xxl?: Cols;
}
/**
 * This interface was referenced by `HttpsJsonLayoutGithubIoNormalizedLayoutKeyword`'s JSON-Schema
 * via the `definition` "state-node-props-lib".
 */
export interface StateNodePropsLib {
    /**
     * This interface was referenced by `StateNodePropsLib`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     */
    [k: string]: unknown;
}
/**
 * This interface was referenced by `HttpsJsonLayoutGithubIoNormalizedLayoutKeyword`'s JSON-Schema
 * via the `definition` "state-node-slots-lib".
 */
export interface StateNodeSlotsLib {
    [k: string]: Slot;
}
/**
 * This interface was referenced by `HttpsJsonLayoutGithubIoNormalizedLayoutKeyword`'s JSON-Schema
 * via the `definition` "child-ref".
 */
export interface ChildRef {
    key: string | number;
    cols?: ColsObj;
}
/**
 * This interface was referenced by `HttpsJsonLayoutGithubIoNormalizedLayoutKeyword`'s JSON-Schema
 * via the `definition` "child-composite".
 */
export interface ChildComposite {
    key: string | number;
    cols?: ColsObj;
    comp?: string;
    title?: string | null;
    subtitle?: string | null;
    children: Children;
    [k: string]: unknown;
}
/**
 * This interface was referenced by `HttpsJsonLayoutGithubIoNormalizedLayoutKeyword`'s JSON-Schema
 * via the `definition` "select-item".
 */
export interface SelectItem {
    title: string;
    key: string;
    value: unknown;
    icon?: string;
    [k: string]: unknown;
}
/**
 * This interface was referenced by `HttpsJsonLayoutGithubIoNormalizedLayoutKeyword`'s JSON-Schema
 * via the `definition` "get-items-fetch".
 */
export interface GetItemsFetch {
    url: Expression;
    qSearchParam?: string;
    searchParams?: {
        [k: string]: Expression;
    };
    [k: string]: unknown;
}
//# sourceMappingURL=types.d.ts.map