/**
 * @param {import('../index.js').CompiledExpression[]} expressions
 * @param {import('@json-layout/vocabulary').Expression} expression
 * @param {any} data
 * @param {import('./types.js').StateNodeOptions} options
 * @param {import('./utils/display.js').Display} display
 * @param {import('@json-layout/vocabulary').BaseCompObject} layout
 * @param {Record<string, import('ajv').ValidateFunction>} validates
 * @param {unknown} rootData
 * @param {import('../compile/types.js').ParentContextExpression | null} parentContext
 * @returns {any}
 */
export function evalExpression(expressions: import('../index.js').CompiledExpression[], expression: import('@json-layout/vocabulary').Expression, data: any, options: import('./types.js').StateNodeOptions, display: import('./utils/display.js').Display, layout: import('@json-layout/vocabulary').BaseCompObject, validates: Record<string, import('ajv').ValidateFunction>, rootData: unknown, parentContext: import('../compile/types.js').ParentContextExpression | null): any;
/**
 *
 * @param {import('./types.js').CreateStateTreeContext} context
 * @param {import('./types.js').StateNodeOptions} parentOptions
 * @param {import('../index.js').CompiledLayout} compiledLayout
 * @param {string | number} key
 * @param {string} fullKey
 * @param {string | null} parentFullKey
 * @param {string} dataPath
 * @param {string | null} parentDataPath
 * @param {import('../index.js').SkeletonNode} skeleton
 * @param {import('@json-layout/vocabulary').Child | null} childDefinition
 * @param {import('./utils/display.js').Display} parentDisplay
 * @param {unknown} data
 * @param {import('../compile/types.js').ParentContextExpression | null} parentContext
 * @param {import('./types.js').ValidationState} validationState
 * @param {import('./types.js').StateNode} [reusedNode]
 * @returns {import('./types.js').StateNode}
 */
export function createStateNode(context: import('./types.js').CreateStateTreeContext, parentOptions: import('./types.js').StateNodeOptions, compiledLayout: import('../index.js').CompiledLayout, key: string | number, fullKey: string, parentFullKey: string | null, dataPath: string, parentDataPath: string | null, skeleton: import('../index.js').SkeletonNode, childDefinition: import('@json-layout/vocabulary').Child | null, parentDisplay: import('./utils/display.js').Display, data: unknown, parentContext: import('../compile/types.js').ParentContextExpression | null, validationState: import('./types.js').ValidationState, reusedNode?: import("./types.js").StateNode | undefined): import('./types.js').StateNode;
/** @type {(draft: any, node: import('./types.js').StateNode, data: unknown) => any} */
export const producePatchedData: (draft: any, node: import('./types.js').StateNode, data: unknown) => any;
//# sourceMappingURL=state-node.d.ts.map