export { Display } from "./utils/display.js";
export { getRegexp } from "./utils/regexps.js";
/**
 * @typedef {import('./types.js').StateNode} StateNode
 * @typedef {import('./types.js').StateTree} StateTree
 * @typedef {import('./types.js').StatefulLayoutOptions} StatefulLayoutOptions
 * @typedef {import('./types.js').CreateStateTreeContext} CreateStateTreeContext
 * @typedef {import('./types.js').TextFieldNode} TextFieldNode
 * @typedef {import('./types.js').TextareaNode} TextareaNode
 * @typedef {import('./types.js').NumberFieldNode} NumberFieldNode
 * @typedef {import('./types.js').SliderNode} SliderNode
 * @typedef {import('./types.js').SectionNode} SectionNode
 * @typedef {import('./types.js').SelectNode} SelectNode
 * @typedef {import('./types.js').AutocompleteNode} AutocompleteNode
 * @typedef {import('./types.js').RadioGroupNode} RadioGroupNode
 * @typedef {import('./types.js').CheckboxGroupNode} CheckboxGroupNode
 * @typedef {import('./types.js').SwitchGroupNode} SwitchGroupNode
 * @typedef {import('./types.js').ComboboxNode} ComboboxNode
 * @typedef {import('./types.js').CheckboxNode} CheckboxNode
 * @typedef {import('./types.js').SwitchNode} SwitchNode
 * @typedef {import('./types.js').ColorPickerNode} ColorPickerNode
 * @typedef {import('./types.js').DatePickerNode} DatePickerNode
 * @typedef {import('./types.js').DateTimePickerNode} DateTimePickerNode
 * @typedef {import('./types.js').TimePickerNode} TimePickerNode
 * @typedef {import('./types.js').ExpansionPanelsNode} ExpansionPanelsNode
 * @typedef {import('./types.js').TabsNode} TabsNode
 * @typedef {import('./types.js').VerticalTabsNode} VerticalTabsNode
 * @typedef {import('./types.js').StepperNode} StepperNode
 * @typedef {import('./types.js').OneOfSelectNode} OneOfSelectNode
 * @typedef {import('./types.js').ListNode} ListNode
 * @typedef {import('./types.js').FileInputNode} FileInputNode
 * @typedef {import('./types.js').CardNode} CardNode
 * @typedef {import('./types.js').FileRef} FileRef
 */
/** @type {(node: StateNode | undefined) => node is SectionNode} */
export const isSection: (node: StateNode | undefined) => node is import("./types.js").SectionNode;
/** @type {(node: StateNode | undefined, components: Record<string, import('@json-layout/vocabulary').ComponentInfo>) => node is SelectNode | ComboboxNode | AutocompleteNode} */
export const isItemsNode: (node: StateNode | undefined, components: Record<string, import('@json-layout/vocabulary').ComponentInfo>) => node is import("./types.js").SelectNode | import("./types.js").AutocompleteNode | import("./types.js").ComboboxNode;
export class StatefulLayout {
    /**
     * @param {import("../index.js").CompiledLayout} compiledLayout
     * @param {import("../index.js").SkeletonTree} skeletonTree
     * @param {Partial<StatefulLayoutOptions>} options
     * @param {unknown} [data]
     */
    constructor(compiledLayout: import("../index.js").CompiledLayout, skeletonTree: import("../index.js").SkeletonTree, options: Partial<StatefulLayoutOptions>, data?: unknown);
    /**
     * @private
     * @readonly
     * @type {import('../index.js').CompiledLayout}
     */
    private readonly _compiledLayout;
    get compiledLayout(): import("../compile/types.js").CompiledLayout;
    /**
     * @private
     * @type {StateTree}
     */
    private _stateTree;
    get stateTree(): import("./types.js").StateTree;
    /**
     * @readonly
     * @type {import('../index.js').SkeletonTree}
     */
    readonly skeletonTree: import('../index.js').SkeletonTree;
    /**
     * @private
     * @type {Display}
     */
    private _display;
    get display(): Display;
    /**
     * @private
     * @type {import('./types.js').ValidationState}
     */
    private _validationState;
    /**
     * @private
     * @param {Partial<import('./types.js').ValidationState>} validationState
     */
    set validationState(arg: import("./types.js").ValidationState);
    /**
     * @returns {import('./types.js').ValidationState}
     */
    get validationState(): import("./types.js").ValidationState;
    /**
     * @private
     * @type {StatefulLayoutOptions}
     */
    private _options;
    /**
     * @param {Partial<StatefulLayoutOptions>} options
     */
    set options(arg: import("./types.js").StatefulLayoutOptions);
    /**
     * @returns {StatefulLayoutOptions}
     */
    get options(): import("./types.js").StatefulLayoutOptions;
    /**
     * @private
     * @type {unknown}
     */
    private _data;
    set data(arg: unknown);
    get data(): unknown;
    /**
     * @private
     * @type {unknown}
     */
    private _previousData;
    /**
     * @private
     * @type {boolean}
     */
    private _dataWaitingForBlur;
    /**
     * @private
     * @type {CreateStateTreeContext}
     */
    private _lastCreateStateTreeContext;
    /**
     * @private
     * @type {string | null}
     */
    private _autofocusTarget;
    /**
     * @private
     * @type {string | null}
     */
    private _previousAutofocusTarget;
    /**
     * @type {FileRef[]}
     */
    files: FileRef[];
    /**
     * @type {Record<string, number>}
     */
    activatedItems: Record<string, number>;
    /**
     * @private
     * @param {Partial<StatefulLayoutOptions>} options
     */
    private prepareOptions;
    /**
     * @private
     */
    private initValidationState;
    /**
     * @private
     */
    private updateState;
    /**
     * @private
     */
    private emitData;
    /**
     * @private
     * @param {boolean} rehydrate
     */
    private createStateTree;
    validate(): void;
    resetValidation(): void;
    /**
     * @returns {boolean}
     */
    get valid(): boolean;
    /**
     * @returns {string[]}
     */
    get errors(): string[];
    /**
     * @returns {boolean}
     */
    get hasHiddenError(): boolean;
    /**
     * @private
     * @param {StateNode} node
     * @returns {import('../compile/types.js').ParentContextExpression | null}
     */
    private getParentContextExpression;
    /**
     * @param {StateNode} node
     * @param {import('@json-layout/vocabulary').Expression} expression
     * @param {any} data
     * @returns {any}
     */
    evalNodeExpression(node: StateNode, expression: import('@json-layout/vocabulary').Expression, data: any): any;
    /**
     * @private
     * @param {StateNode} node
     * @param {unknown} data
     * @param {boolean} [validated]
     * @param {number} [activateKey]
     */
    private applyInput;
    /**
     * @private
     * @type {null | [StateNode, unknown, boolean, number | undefined, ReturnType<typeof setTimeout>]}
     */
    private debouncedInput;
    applyDebouncedInput(): void;
    /**
     * @param {StateNode} node
     * @param {unknown} data
     * @param {number} [activateKey]
     */
    input(node: StateNode, data: unknown, activateKey?: number | undefined): void;
    /**
     * @param {StateNode} node
     */
    blur(node: StateNode): void;
    /**
     * @param {StateNode} node
     */
    validateNodeRecurse(node: StateNode): void;
    /**
     * @private
     * @type {Record<string, {key: any, appliedQ: boolean, items: import('@json-layout/vocabulary').SelectItems}>}
     */
    private _itemsCache;
    /**
     * @private
     * @param {StateNode} node
     * @param {string} q
     * @returns {Promise<{appliedQ: boolean, items: import('@json-layout/vocabulary').SelectItems}>}
     */
    private getItemsWithoutCache;
    /**
     * @param {StateNode} node
     * @param {string} q
     * @returns {Promise<import('@json-layout/vocabulary').SelectItems>}
     */
    getItems(node: StateNode, q?: string): Promise<import('@json-layout/vocabulary').SelectItems>;
    /**
     * @param {StateNode} node
     * @param {any} rawItem
     * @returns {import('@json-layout/vocabulary').SelectItem}
     */
    prepareSelectItem(node: StateNode, rawItem: any): import('@json-layout/vocabulary').SelectItem;
    /**
     * @param {StateNode} node
     * @param {number} key
     */
    activateItem(node: StateNode, key: number): void;
    /**
     * @param {StateNode} node
     */
    deactivateItem(node: StateNode): void;
    handleAutofocus(): void;
}
export type StateNode = import('./types.js').StateNode;
export type StateTree = import('./types.js').StateTree;
export type StatefulLayoutOptions = import('./types.js').StatefulLayoutOptions;
export type CreateStateTreeContext = import('./types.js').CreateStateTreeContext;
export type TextFieldNode = import('./types.js').TextFieldNode;
export type TextareaNode = import('./types.js').TextareaNode;
export type NumberFieldNode = import('./types.js').NumberFieldNode;
export type SliderNode = import('./types.js').SliderNode;
export type SectionNode = import('./types.js').SectionNode;
export type SelectNode = import('./types.js').SelectNode;
export type AutocompleteNode = import('./types.js').AutocompleteNode;
export type RadioGroupNode = import('./types.js').RadioGroupNode;
export type CheckboxGroupNode = import('./types.js').CheckboxGroupNode;
export type SwitchGroupNode = import('./types.js').SwitchGroupNode;
export type ComboboxNode = import('./types.js').ComboboxNode;
export type CheckboxNode = import('./types.js').CheckboxNode;
export type SwitchNode = import('./types.js').SwitchNode;
export type ColorPickerNode = import('./types.js').ColorPickerNode;
export type DatePickerNode = import('./types.js').DatePickerNode;
export type DateTimePickerNode = import('./types.js').DateTimePickerNode;
export type TimePickerNode = import('./types.js').TimePickerNode;
export type ExpansionPanelsNode = import('./types.js').ExpansionPanelsNode;
export type TabsNode = import('./types.js').TabsNode;
export type VerticalTabsNode = import('./types.js').VerticalTabsNode;
export type StepperNode = import('./types.js').StepperNode;
export type OneOfSelectNode = import('./types.js').OneOfSelectNode;
export type ListNode = import('./types.js').ListNode;
export type FileInputNode = import('./types.js').FileInputNode;
export type CardNode = import('./types.js').CardNode;
export type FileRef = import('./types.js').FileRef;
import { Display } from './utils/display.js';
//# sourceMappingURL=index.d.ts.map