import { OpenApisV2 } from './openApiV2';
import { OpenApisV3 } from './openApiV3';
import SchemaId from './schemaId';
import { Schema, JsonSchemaObject, SchemaType, JsonSchema } from './type';
type OpenApiSchema = OpenApisV2.SchemaJson | OpenApisV3.SchemaJson;
export interface NormalizedSchema extends Schema {
    content: JsonSchemaObject;
}
export declare function getSubSchema(rootSchema: Schema, pointer: string, id?: SchemaId): Schema;
export declare function getId(type: SchemaType, content: JsonSchemaObject): string;
export declare function setId(type: SchemaType, content: JsonSchemaObject, id: string): void;
export declare function searchAllSubSchema(schema: Schema, onFoundSchema: (subSchema: Schema) => void, onFoundReference: (refId: SchemaId) => void): void;
export declare function selectSchemaType(content: JsonSchema | OpenApiSchema): {
    type: SchemaType;
    openApiVersion?: 2 | 3;
};
export {};
