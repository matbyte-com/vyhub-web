export const emits: {
    /**
     * @arg {any} data
    */
    'update:modelValue': (data: any) => boolean;
    /**
     * @arg {import('../types.js').VjsfStatefulLayout} state
    */
    'update:state': (state: import('../types.js').VjsfStatefulLayout) => boolean;
};
export function useVjsf(schema: import('vue').Ref<Object>, modelValue: import('vue').Ref<any>, options: import('vue').Ref<import("../types.js").PartialVjsfOptions | null>, nodeComponents: Record<string, import('vue').Component>, emit: any, compile?: typeof import("@json-layout/core").compile | undefined, precompiledLayout?: import("vue").Ref<import("../../../node_modules/@json-layout/core/types/compile/types.js").CompiledLayout, import("../../../node_modules/@json-layout/core/types/compile/types.js").CompiledLayout> | undefined): {
    el: import("vue").Ref<null, null>;
    statefulLayout: import("vue").ShallowRef<import("../types.js").VjsfStatefulLayout | null>;
    stateTree: import("vue").ShallowRef<import("../../../node_modules/@json-layout/core/types/state/types.js").StateTree | null>;
};
//# sourceMappingURL=use-vjsf.d.ts.map